%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"

int yylex(void); /* function prototype */

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	}

%token <sval> ID STRING
%token <ival> INT

%right ASSIGN
%left OR
%left AND
%left EQ NEQ
%left GT GE LT LE
%left PLUS MINUS
%left TIMES DIVIDE

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

%start program

%%

program:    exp 
;

decs:       /* empty */
|           dec decs
;

dec:        tydec
|           vardec
|           fundec
;

tydec:      TYPE ID EQ ty
;

ty:         ID
|           LBRACE tyfields RBRACE
|           ARRAY OF ID
;

tyfields:   /* empty */
|           ID COLON ID
|           ID COLON ID COMMA tyfields
;

vardec:     VAR ID ASSIGN exp
|           VAR ID COLON ID ASSIGN exp
;

fundec:     FUNCTION ID LPAREN tyfields RPAREN EQ exp
|           FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp
;


letblock:   LET decs IN exps END
;

whileblock: WHILE exp DO exp
;

ifblock:    IF exp THEN exp ELSE exp
|           IF exp THEN exp
;   

forblock:   FOR ID ASSIGN exp TO exp DO exp
;

expseq:     LPAREN exps RPAREN           
;

exps:       exp
|           exp SEMICOLON exps
;

args:       exp
|           exp COMMA args
;

lvalue:     ID
|           lvalue DOT ID
|           lvalue LBRACK exp RBRACK
;

record:     ID EQ exp
|           ID EQ exp COMMA record
;

exp:        NIL                     // TODO: better exp organization
|           LPAREN RPAREN           // no value
|           expseq
|           letblock
|           whileblock
|           ifblock
|           forblock
|           BREAK
|           dec
|           ID LBRACE record RBRACE        // for record creation
|           ID LBRACE RBRACE
|           ID LBRACK exp RBRACK OF exp                // array creation
|           lvalue ASSIGN exp
|           ID LPAREN RPAREN
|           ID LPAREN args RPAREN
|           bool
;       

bool:       bool AND comp        // TODO: better precedence names
|           bool OR comp
|           comp
;

comp:       sumop EQ sumop      // exps like a=b=c is illeagal
|           sumop NEQ sumop     // so immediately go to the next precedence
|           sumop LT sumop
|           sumop LE sumop
|           sumop GT sumop
|           sumop GE sumop
|           sumop
;

sumop:      sumop PLUS multop            
|           sumop MINUS multop
|           multop
;

multop:     multop TIMES neg
|           multop DIVIDE neg
|           neg
;

neg:        MINUS term
|           term
;

term:       INT
|           STRING
|           lvalue
|           NIL
|           LPAREN exp RPAREN
|           ID LPAREN RPAREN
|           ID LPAREN args RPAREN
;

	
