%{
#include <stdio.h>
#include "util.h"
#include "symbol.h" 
#include "errormsg.h"
#include "absyn.h"

int yylex(void); /* function prototype */

A_exp absyn_root;

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
    int pos;
    int ival;
    string sval;

    A_exp exp;
}


%token <sval> ID
%token <ival> INT
%token <sval> STRING

%type <exp> exp

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

%nonassoc OF
%nonassoc IF THEN WHILE DO FOR TO
%left ELSE
%nonassoc ASSIGN 
%left OR AND
%nonassoc EQ NEQ GT LT GE LE
%left PLUS MINUS 
%left TIMES DIVIDE

%start program

%%

program:	exp						        {absyn_root=$1;}

term:      INT                              {$$ = A_IntExp(EM_tokPos, $1); }
        |  STRING                           {$$ = A_StringExp(EM_tokPos, $1);}
        |  lvalue                           {$$ = A_VarExp(EM_tokPos, $1);}
        |  LPAREN expseq RPAREN             {$$ = $2;}
        |  MINUS exp                        {$$ = A_OpExp(EM_tokPos, A_IntExp(EM_tokPos, 0), $1, $2);}


exp:       term                             {$$ = A_ExpList(EM_tokPos, $1, NULL); }
        |  NIL                              {$$ = A_NilExp(EM_tokPos); }
        |  IF exp THEN exp                  {$$ = A_IfExp(EM_tokPos, $2, $4);}
        |  IF exp THEN exp ELSE exp         {$$ = A_IfExp(EM_tokPos, $2, $4, $6);}
        |  WHILE exp DO exp                 {$$ = A_WhileExp(EM_tokPos, $2, $4);}
        |  FOR ID ASSIGN exp TO exp DO exp  {$$ = A_ForExp(EM_tokPos, $2, $4, $6, $8);}
        |  BREAK                            {$$ = A_BreakExp(EM_tokPos);}
        |  LET decs IN expseq END           {$$ = A_LetExp(EM_tokPos, $2, $4);}
        |  ID LPAREN args RPAREN            {$$ = A_CallExp(EM_tokPos, $1, $3);}
        |  ID LBRACE recfields RBRACE       {$$ = A_RecordExp(EM_tokPos, $1, $3);}
        |  ID LBRACK exp RBRACK OF exp      {$$ = A_ArrayExp(EM_tokPos, $3, $6);}
        |  exp TIMES exp                    {$$ = A_OpExp(EM_tokPos, $2, $1, $3);}
        |  exp DIVIDE exp                   {$$ = A_OpExp(EM_tokPos, $2, $1, $3);}
        |  exp PLUS exp                     {$$ = A_OpExp(EM_tokPos, $2, $1, $3);} 
        |  exp MINUS exp                    {$$ = A_OpExp(EM_tokPos, $2, $1, $3);}
        |  exp EQ exp                       {$$ = A_OpExp(EM_tokPos, $2, $1, $3);}
        |  exp NEQ exp                      {$$ = A_OpExp(EM_tokPos, $2, $1, $3);}
        |  exp LT exp                       {$$ = A_OpExp(EM_tokPos, $2, $1, $3);}
        |  exp LE exp                       {$$ = A_OpExp(EM_tokPos, $2, $1, $3);}
        |  exp GT exp                       {$$ = A_OpExp(EM_tokPos, $2, $1, $3);}
        |  exp GE exp                       {$$ = A_OpExp(EM_tokPos, $2, $1, $3);}
        |  exp OR exp                       {$$ = A_OpExp(EM_tokPos, $2, $1, $3);}
        |  exp AND exp                      {$$ = A_IfExp(EM_tokPos, $1, $3, A_IntExp(EM_tokPos, 0));}
        |  lvalue ASSIGN exp                {$$ = A_AssignExp(EM_tokPos, $1, $3);}

expseq: /*empty*/                      
        | expseq1                      

expseq1: exp                           
        |  exp SEMICOLON expseq1       

args:   /* empty */                    
        |  args1                       

args1:  exp                            
        |  exp COMMA args1             		{$$ = A_SeqExp(EM_tokPos, $2);}
        
recfields: /* empty */                 
        |  recfields1                  

recfields1: ID EQ exp                  //	{$$ = A_EfieldList(EM_tokPos, $1, $3);}
        |  ID EQ exp COMMA recfields1  	

lvalue: ID                             		{$$ = A_SimpleVar(EM_tokPos, $1);}
        | lvalue DOT ID                		{$$ = A_FieldVar(EM_tokPos, $1, $3);}
        | lvalue LBRACK exp RBRACK    			{$$ = A_SubscriptVar(A_SimpleVar(EM_tokPos, $1), $1, $3);}
        | ID LBRACK exp RBRACK         		{$$ = A_SubscriptVar(EM_tokPos, $1, $3);}

ty:     ID                             		{$$ = A_NameTy(EM_tokPos, $1);}
        |  LBRACE tyfields RBRACE      		{$$ = A_RecordTy(EM_tokPos, $2);}
        |  ARRAY OF ID                 		{$$ = A_ArrayTy(EM_tokPos, $3);} // $3 or $1?

decs:   /* empty */                    
        |  vardec decs                			{$$ = A_VarDec(EM_tokPos, $2);}
        |  typedec decs               			{$$ = A_TypeDec(EM_tokPos, $2);}
        |  funcdec decs                		{$$ = A_FunctionDec(EM_tokPos, $2);}

vardec:    VAR ID ASSIGN exp           		{$$ = A_VarDec(EM_tokPos, $2, NULL, $4);}
        |  VAR ID COLON ID ASSIGN exp  		{$$ = A_VarDec(EM_tokPos, $2, $4, $6);}

typedec:   TYPE ID EQ ty              			{$$ = A_Namety($2, $4);}

funcdec:   FUNCTION ID LPAREN tyfields RPAREN EQ exp   			{$$ = A_Fundec(EM_tokPos, $2, $4, NULL, $7);}
        |  FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp  {$$ = A_Fundec(EM_tokPos, $2, $4, $7, $9);}

tyfields: /* empty */                  
        | tyfields1                    

tyfields1: ID COLON ID                 
        |  ID COLON ID COMMA tyfields1 
