Terminals unused in grammar

   LBRACK
   RBRACK
   DOT
   NIL


State 1 conflicts: 1 shift/reduce
State 14 conflicts: 12 shift/reduce, 1 reduce/reduce
State 52 conflicts: 12 shift/reduce
State 63 conflicts: 12 shift/reduce
State 64 conflicts: 12 shift/reduce
State 65 conflicts: 12 shift/reduce
State 66 conflicts: 12 shift/reduce
State 67 conflicts: 12 shift/reduce
State 68 conflicts: 12 shift/reduce
State 69 conflicts: 12 shift/reduce
State 70 conflicts: 12 shift/reduce
State 71 conflicts: 12 shift/reduce
State 72 conflicts: 12 shift/reduce
State 73 conflicts: 12 shift/reduce
State 74 conflicts: 12 shift/reduce
State 77 conflicts: 13 shift/reduce
State 87 conflicts: 12 shift/reduce
State 97 conflicts: 1 shift/reduce
State 105 conflicts: 12 shift/reduce
State 112 conflicts: 12 shift/reduce
State 118 conflicts: 12 shift/reduce
State 123 conflicts: 12 shift/reduce


Grammar

    0 $accept: program $end

    1 program: /* empty */
    2        | exp program
    3        | dec program

    4 decs: /* empty */
    5     | dec decs

    6 dec: tydec
    7    | vardec
    8    | fundec

    9 tydec: TYPE ID EQ ty

   10 ty: ID
   11   | LBRACE tyfields RBRACE
   12   | ARRAY OF ID

   13 tyfields: /* empty */
   14         | ID COLON ID
   15         | ID COLON ID COMMA tyfields

   16 vardec: VAR ID ASSIGN exp
   17       | VAR ID COLON ID ASSIGN exp

   18 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp
   19       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp

   20 letblock: LET decs IN expseq END

   21 whileblock: WHILE exp DO exp SEMICOLON

   22 ifblock: IF exp THEN exp
   23        | IF exp THEN exp ELSE exp

   24 forblock: FOR ID ASSIGN exp TO exp DO exp SEMICOLON

   25 expseq: explist
   26       | LPAREN explist RPAREN

   27 explist: exp
   28        | exp SEMICOLON explist

   29 args: /* empty */
   30     | exp
   31     | exp COLON args

   32 exp: ID
   33    | ID LPAREN args RPAREN
   34    | LPAREN exp RPAREN
   35    | letblock
   36    | whileblock
   37    | ifblock
   38    | forblock
   39    | BREAK
   40    | dec
   41    | exp PLUS exp
   42    | exp MINUS exp
   43    | exp TIMES exp
   44    | exp DIVIDE exp
   45    | exp EQ exp
   46    | exp NEQ exp
   47    | exp LT exp
   48    | exp LE exp
   49    | exp GT exp
   50    | exp GE exp
   51    | exp AND exp
   52    | exp OR exp
   53    | ID ASSIGN exp
   54    | INT
   55    | STRING


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 9 10 12 14 15 16 17 18 19 24 32 33 53
STRING (259) 55
INT (260) 54
COMMA (261) 15
COLON (262) 14 15 17 19 31
SEMICOLON (263) 21 24 28
LPAREN (264) 18 19 26 33 34
RPAREN (265) 18 19 26 33 34
LBRACK (266)
RBRACK (267)
LBRACE (268) 11
RBRACE (269) 11
DOT (270)
PLUS (271) 41
MINUS (272) 42
TIMES (273) 43
DIVIDE (274) 44
EQ (275) 9 18 19 45
NEQ (276) 46
LT (277) 47
LE (278) 48
GT (279) 49
GE (280) 50
AND (281) 51
OR (282) 52
ASSIGN (283) 16 17 24 53
ARRAY (284) 12
IF (285) 22 23
THEN (286) 22 23
ELSE (287) 23
WHILE (288) 21
FOR (289) 24
TO (290) 24
DO (291) 21 24
LET (292) 20
IN (293) 20
END (294) 20
OF (295) 12
BREAK (296) 39
NIL (297)
FUNCTION (298) 18 19
VAR (299) 16 17
TYPE (300) 9


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
program (47)
    on left: 1 2 3, on right: 0 2 3
decs (48)
    on left: 4 5, on right: 5 20
dec (49)
    on left: 6 7 8, on right: 3 5 40
tydec (50)
    on left: 9, on right: 6
ty (51)
    on left: 10 11 12, on right: 9
tyfields (52)
    on left: 13 14 15, on right: 11 15 18 19
vardec (53)
    on left: 16 17, on right: 7
fundec (54)
    on left: 18 19, on right: 8
letblock (55)
    on left: 20, on right: 35
whileblock (56)
    on left: 21, on right: 36
ifblock (57)
    on left: 22 23, on right: 37
forblock (58)
    on left: 24, on right: 38
expseq (59)
    on left: 25 26, on right: 20
explist (60)
    on left: 27 28, on right: 25 26 28
args (61)
    on left: 29 30 31, on right: 31 33
exp (62)
    on left: 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49
    50 51 52 53 54 55, on right: 2 16 17 18 19 21 22 23 24 27 28 30
    31 34 41 42 43 44 45 46 47 48 49 50 51 52 53


State 0

    0 $accept: . program $end

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    $default  reduce using rule 1 (program)

    program     go to state 13
    dec         go to state 14
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    exp         go to state 22


State 1

   32 exp: ID .
   33    | ID . LPAREN args RPAREN
   53    | ID . ASSIGN exp

    LPAREN  shift, and go to state 23
    ASSIGN  shift, and go to state 24

    LPAREN    [reduce using rule 32 (exp)]
    $default  reduce using rule 32 (exp)


State 2

   55 exp: STRING .

    $default  reduce using rule 55 (exp)


State 3

   54 exp: INT .

    $default  reduce using rule 54 (exp)


State 4

   34 exp: LPAREN . exp RPAREN

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    exp         go to state 26


State 5

   22 ifblock: IF . exp THEN exp
   23        | IF . exp THEN exp ELSE exp

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    exp         go to state 27


State 6

   21 whileblock: WHILE . exp DO exp SEMICOLON

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    exp         go to state 28


State 7

   24 forblock: FOR . ID ASSIGN exp TO exp DO exp SEMICOLON

    ID  shift, and go to state 29


State 8

   20 letblock: LET . decs IN expseq END

    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    $default  reduce using rule 4 (decs)

    decs    go to state 30
    dec     go to state 31
    tydec   go to state 15
    vardec  go to state 16
    fundec  go to state 17


State 9

   39 exp: BREAK .

    $default  reduce using rule 39 (exp)


State 10

   18 fundec: FUNCTION . ID LPAREN tyfields RPAREN EQ exp
   19       | FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ exp

    ID  shift, and go to state 32


State 11

   16 vardec: VAR . ID ASSIGN exp
   17       | VAR . ID COLON ID ASSIGN exp

    ID  shift, and go to state 33


State 12

    9 tydec: TYPE . ID EQ ty

    ID  shift, and go to state 34


State 13

    0 $accept: program . $end

    $end  shift, and go to state 35


State 14

    3 program: dec . program
   40 exp: dec .

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    $end      reduce using rule 1 (program)
    $end      [reduce using rule 40 (exp)]
    ID        [reduce using rule 40 (exp)]
    STRING    [reduce using rule 40 (exp)]
    INT       [reduce using rule 40 (exp)]
    LPAREN    [reduce using rule 40 (exp)]
    IF        [reduce using rule 40 (exp)]
    WHILE     [reduce using rule 40 (exp)]
    FOR       [reduce using rule 40 (exp)]
    LET       [reduce using rule 40 (exp)]
    BREAK     [reduce using rule 40 (exp)]
    FUNCTION  [reduce using rule 40 (exp)]
    VAR       [reduce using rule 40 (exp)]
    TYPE      [reduce using rule 40 (exp)]
    $default  reduce using rule 40 (exp)

    program     go to state 36
    dec         go to state 14
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    exp         go to state 22


State 15

    6 dec: tydec .

    $default  reduce using rule 6 (dec)


State 16

    7 dec: vardec .

    $default  reduce using rule 7 (dec)


State 17

    8 dec: fundec .

    $default  reduce using rule 8 (dec)


State 18

   35 exp: letblock .

    $default  reduce using rule 35 (exp)


State 19

   36 exp: whileblock .

    $default  reduce using rule 36 (exp)


State 20

   37 exp: ifblock .

    $default  reduce using rule 37 (exp)


State 21

   38 exp: forblock .

    $default  reduce using rule 38 (exp)


State 22

    2 program: exp . program
   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . TIMES exp
   44    | exp . DIVIDE exp
   45    | exp . EQ exp
   46    | exp . NEQ exp
   47    | exp . LT exp
   48    | exp . LE exp
   49    | exp . GT exp
   50    | exp . GE exp
   51    | exp . AND exp
   52    | exp . OR exp

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    PLUS      shift, and go to state 37
    MINUS     shift, and go to state 38
    TIMES     shift, and go to state 39
    DIVIDE    shift, and go to state 40
    EQ        shift, and go to state 41
    NEQ       shift, and go to state 42
    LT        shift, and go to state 43
    LE        shift, and go to state 44
    GT        shift, and go to state 45
    GE        shift, and go to state 46
    AND       shift, and go to state 47
    OR        shift, and go to state 48
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    $default  reduce using rule 1 (program)

    program     go to state 49
    dec         go to state 14
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    exp         go to state 22


State 23

   33 exp: ID LPAREN . args RPAREN

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    $default  reduce using rule 29 (args)

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    args        go to state 50
    exp         go to state 51


State 24

   53 exp: ID ASSIGN . exp

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    exp         go to state 52


State 25

   40 exp: dec .

    $default  reduce using rule 40 (exp)


State 26

   34 exp: LPAREN exp . RPAREN
   41    | exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . TIMES exp
   44    | exp . DIVIDE exp
   45    | exp . EQ exp
   46    | exp . NEQ exp
   47    | exp . LT exp
   48    | exp . LE exp
   49    | exp . GT exp
   50    | exp . GE exp
   51    | exp . AND exp
   52    | exp . OR exp

    RPAREN  shift, and go to state 53
    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48


State 27

   22 ifblock: IF exp . THEN exp
   23        | IF exp . THEN exp ELSE exp
   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . TIMES exp
   44    | exp . DIVIDE exp
   45    | exp . EQ exp
   46    | exp . NEQ exp
   47    | exp . LT exp
   48    | exp . LE exp
   49    | exp . GT exp
   50    | exp . GE exp
   51    | exp . AND exp
   52    | exp . OR exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48
    THEN    shift, and go to state 54


State 28

   21 whileblock: WHILE exp . DO exp SEMICOLON
   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . TIMES exp
   44    | exp . DIVIDE exp
   45    | exp . EQ exp
   46    | exp . NEQ exp
   47    | exp . LT exp
   48    | exp . LE exp
   49    | exp . GT exp
   50    | exp . GE exp
   51    | exp . AND exp
   52    | exp . OR exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48
    DO      shift, and go to state 55


State 29

   24 forblock: FOR ID . ASSIGN exp TO exp DO exp SEMICOLON

    ASSIGN  shift, and go to state 56


State 30

   20 letblock: LET decs . IN expseq END

    IN  shift, and go to state 57


State 31

    5 decs: dec . decs

    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    $default  reduce using rule 4 (decs)

    decs    go to state 58
    dec     go to state 31
    tydec   go to state 15
    vardec  go to state 16
    fundec  go to state 17


State 32

   18 fundec: FUNCTION ID . LPAREN tyfields RPAREN EQ exp
   19       | FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ exp

    LPAREN  shift, and go to state 59


State 33

   16 vardec: VAR ID . ASSIGN exp
   17       | VAR ID . COLON ID ASSIGN exp

    COLON   shift, and go to state 60
    ASSIGN  shift, and go to state 61


State 34

    9 tydec: TYPE ID . EQ ty

    EQ  shift, and go to state 62


State 35

    0 $accept: program $end .

    $default  accept


State 36

    3 program: dec program .

    $default  reduce using rule 3 (program)


State 37

   41 exp: exp PLUS . exp

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    exp         go to state 63


State 38

   42 exp: exp MINUS . exp

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    exp         go to state 64


State 39

   43 exp: exp TIMES . exp

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    exp         go to state 65


State 40

   44 exp: exp DIVIDE . exp

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    exp         go to state 66


State 41

   45 exp: exp EQ . exp

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    exp         go to state 67


State 42

   46 exp: exp NEQ . exp

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    exp         go to state 68


State 43

   47 exp: exp LT . exp

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    exp         go to state 69


State 44

   48 exp: exp LE . exp

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    exp         go to state 70


State 45

   49 exp: exp GT . exp

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    exp         go to state 71


State 46

   50 exp: exp GE . exp

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    exp         go to state 72


State 47

   51 exp: exp AND . exp

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    exp         go to state 73


State 48

   52 exp: exp OR . exp

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    exp         go to state 74


State 49

    2 program: exp program .

    $default  reduce using rule 2 (program)


State 50

   33 exp: ID LPAREN args . RPAREN

    RPAREN  shift, and go to state 75


State 51

   30 args: exp .
   31     | exp . COLON args
   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . TIMES exp
   44    | exp . DIVIDE exp
   45    | exp . EQ exp
   46    | exp . NEQ exp
   47    | exp . LT exp
   48    | exp . LE exp
   49    | exp . GT exp
   50    | exp . GE exp
   51    | exp . AND exp
   52    | exp . OR exp

    COLON   shift, and go to state 76
    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48

    $default  reduce using rule 30 (args)


State 52

   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . TIMES exp
   44    | exp . DIVIDE exp
   45    | exp . EQ exp
   46    | exp . NEQ exp
   47    | exp . LT exp
   48    | exp . LE exp
   49    | exp . GT exp
   50    | exp . GE exp
   51    | exp . AND exp
   52    | exp . OR exp
   53    | ID ASSIGN exp .

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48

    PLUS      [reduce using rule 53 (exp)]
    MINUS     [reduce using rule 53 (exp)]
    TIMES     [reduce using rule 53 (exp)]
    DIVIDE    [reduce using rule 53 (exp)]
    EQ        [reduce using rule 53 (exp)]
    NEQ       [reduce using rule 53 (exp)]
    LT        [reduce using rule 53 (exp)]
    LE        [reduce using rule 53 (exp)]
    GT        [reduce using rule 53 (exp)]
    GE        [reduce using rule 53 (exp)]
    AND       [reduce using rule 53 (exp)]
    OR        [reduce using rule 53 (exp)]
    $default  reduce using rule 53 (exp)


State 53

   34 exp: LPAREN exp RPAREN .

    $default  reduce using rule 34 (exp)


State 54

   22 ifblock: IF exp THEN . exp
   23        | IF exp THEN . exp ELSE exp

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    exp         go to state 77


State 55

   21 whileblock: WHILE exp DO . exp SEMICOLON

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    exp         go to state 78


State 56

   24 forblock: FOR ID ASSIGN . exp TO exp DO exp SEMICOLON

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    exp         go to state 79


State 57

   20 letblock: LET decs IN . expseq END

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 80
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    expseq      go to state 81
    explist     go to state 82
    exp         go to state 83


State 58

    5 decs: dec decs .

    $default  reduce using rule 5 (decs)


State 59

   18 fundec: FUNCTION ID LPAREN . tyfields RPAREN EQ exp
   19       | FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ exp

    ID  shift, and go to state 84

    $default  reduce using rule 13 (tyfields)

    tyfields  go to state 85


State 60

   17 vardec: VAR ID COLON . ID ASSIGN exp

    ID  shift, and go to state 86


State 61

   16 vardec: VAR ID ASSIGN . exp

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    exp         go to state 87


State 62

    9 tydec: TYPE ID EQ . ty

    ID      shift, and go to state 88
    LBRACE  shift, and go to state 89
    ARRAY   shift, and go to state 90

    ty  go to state 91


State 63

   41 exp: exp . PLUS exp
   41    | exp PLUS exp .
   42    | exp . MINUS exp
   43    | exp . TIMES exp
   44    | exp . DIVIDE exp
   45    | exp . EQ exp
   46    | exp . NEQ exp
   47    | exp . LT exp
   48    | exp . LE exp
   49    | exp . GT exp
   50    | exp . GE exp
   51    | exp . AND exp
   52    | exp . OR exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48

    PLUS      [reduce using rule 41 (exp)]
    MINUS     [reduce using rule 41 (exp)]
    TIMES     [reduce using rule 41 (exp)]
    DIVIDE    [reduce using rule 41 (exp)]
    EQ        [reduce using rule 41 (exp)]
    NEQ       [reduce using rule 41 (exp)]
    LT        [reduce using rule 41 (exp)]
    LE        [reduce using rule 41 (exp)]
    GT        [reduce using rule 41 (exp)]
    GE        [reduce using rule 41 (exp)]
    AND       [reduce using rule 41 (exp)]
    OR        [reduce using rule 41 (exp)]
    $default  reduce using rule 41 (exp)


State 64

   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   42    | exp MINUS exp .
   43    | exp . TIMES exp
   44    | exp . DIVIDE exp
   45    | exp . EQ exp
   46    | exp . NEQ exp
   47    | exp . LT exp
   48    | exp . LE exp
   49    | exp . GT exp
   50    | exp . GE exp
   51    | exp . AND exp
   52    | exp . OR exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48

    PLUS      [reduce using rule 42 (exp)]
    MINUS     [reduce using rule 42 (exp)]
    TIMES     [reduce using rule 42 (exp)]
    DIVIDE    [reduce using rule 42 (exp)]
    EQ        [reduce using rule 42 (exp)]
    NEQ       [reduce using rule 42 (exp)]
    LT        [reduce using rule 42 (exp)]
    LE        [reduce using rule 42 (exp)]
    GT        [reduce using rule 42 (exp)]
    GE        [reduce using rule 42 (exp)]
    AND       [reduce using rule 42 (exp)]
    OR        [reduce using rule 42 (exp)]
    $default  reduce using rule 42 (exp)


State 65

   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . TIMES exp
   43    | exp TIMES exp .
   44    | exp . DIVIDE exp
   45    | exp . EQ exp
   46    | exp . NEQ exp
   47    | exp . LT exp
   48    | exp . LE exp
   49    | exp . GT exp
   50    | exp . GE exp
   51    | exp . AND exp
   52    | exp . OR exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48

    PLUS      [reduce using rule 43 (exp)]
    MINUS     [reduce using rule 43 (exp)]
    TIMES     [reduce using rule 43 (exp)]
    DIVIDE    [reduce using rule 43 (exp)]
    EQ        [reduce using rule 43 (exp)]
    NEQ       [reduce using rule 43 (exp)]
    LT        [reduce using rule 43 (exp)]
    LE        [reduce using rule 43 (exp)]
    GT        [reduce using rule 43 (exp)]
    GE        [reduce using rule 43 (exp)]
    AND       [reduce using rule 43 (exp)]
    OR        [reduce using rule 43 (exp)]
    $default  reduce using rule 43 (exp)


State 66

   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . TIMES exp
   44    | exp . DIVIDE exp
   44    | exp DIVIDE exp .
   45    | exp . EQ exp
   46    | exp . NEQ exp
   47    | exp . LT exp
   48    | exp . LE exp
   49    | exp . GT exp
   50    | exp . GE exp
   51    | exp . AND exp
   52    | exp . OR exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48

    PLUS      [reduce using rule 44 (exp)]
    MINUS     [reduce using rule 44 (exp)]
    TIMES     [reduce using rule 44 (exp)]
    DIVIDE    [reduce using rule 44 (exp)]
    EQ        [reduce using rule 44 (exp)]
    NEQ       [reduce using rule 44 (exp)]
    LT        [reduce using rule 44 (exp)]
    LE        [reduce using rule 44 (exp)]
    GT        [reduce using rule 44 (exp)]
    GE        [reduce using rule 44 (exp)]
    AND       [reduce using rule 44 (exp)]
    OR        [reduce using rule 44 (exp)]
    $default  reduce using rule 44 (exp)


State 67

   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . TIMES exp
   44    | exp . DIVIDE exp
   45    | exp . EQ exp
   45    | exp EQ exp .
   46    | exp . NEQ exp
   47    | exp . LT exp
   48    | exp . LE exp
   49    | exp . GT exp
   50    | exp . GE exp
   51    | exp . AND exp
   52    | exp . OR exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48

    PLUS      [reduce using rule 45 (exp)]
    MINUS     [reduce using rule 45 (exp)]
    TIMES     [reduce using rule 45 (exp)]
    DIVIDE    [reduce using rule 45 (exp)]
    EQ        [reduce using rule 45 (exp)]
    NEQ       [reduce using rule 45 (exp)]
    LT        [reduce using rule 45 (exp)]
    LE        [reduce using rule 45 (exp)]
    GT        [reduce using rule 45 (exp)]
    GE        [reduce using rule 45 (exp)]
    AND       [reduce using rule 45 (exp)]
    OR        [reduce using rule 45 (exp)]
    $default  reduce using rule 45 (exp)


State 68

   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . TIMES exp
   44    | exp . DIVIDE exp
   45    | exp . EQ exp
   46    | exp . NEQ exp
   46    | exp NEQ exp .
   47    | exp . LT exp
   48    | exp . LE exp
   49    | exp . GT exp
   50    | exp . GE exp
   51    | exp . AND exp
   52    | exp . OR exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48

    PLUS      [reduce using rule 46 (exp)]
    MINUS     [reduce using rule 46 (exp)]
    TIMES     [reduce using rule 46 (exp)]
    DIVIDE    [reduce using rule 46 (exp)]
    EQ        [reduce using rule 46 (exp)]
    NEQ       [reduce using rule 46 (exp)]
    LT        [reduce using rule 46 (exp)]
    LE        [reduce using rule 46 (exp)]
    GT        [reduce using rule 46 (exp)]
    GE        [reduce using rule 46 (exp)]
    AND       [reduce using rule 46 (exp)]
    OR        [reduce using rule 46 (exp)]
    $default  reduce using rule 46 (exp)


State 69

   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . TIMES exp
   44    | exp . DIVIDE exp
   45    | exp . EQ exp
   46    | exp . NEQ exp
   47    | exp . LT exp
   47    | exp LT exp .
   48    | exp . LE exp
   49    | exp . GT exp
   50    | exp . GE exp
   51    | exp . AND exp
   52    | exp . OR exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48

    PLUS      [reduce using rule 47 (exp)]
    MINUS     [reduce using rule 47 (exp)]
    TIMES     [reduce using rule 47 (exp)]
    DIVIDE    [reduce using rule 47 (exp)]
    EQ        [reduce using rule 47 (exp)]
    NEQ       [reduce using rule 47 (exp)]
    LT        [reduce using rule 47 (exp)]
    LE        [reduce using rule 47 (exp)]
    GT        [reduce using rule 47 (exp)]
    GE        [reduce using rule 47 (exp)]
    AND       [reduce using rule 47 (exp)]
    OR        [reduce using rule 47 (exp)]
    $default  reduce using rule 47 (exp)


State 70

   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . TIMES exp
   44    | exp . DIVIDE exp
   45    | exp . EQ exp
   46    | exp . NEQ exp
   47    | exp . LT exp
   48    | exp . LE exp
   48    | exp LE exp .
   49    | exp . GT exp
   50    | exp . GE exp
   51    | exp . AND exp
   52    | exp . OR exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48

    PLUS      [reduce using rule 48 (exp)]
    MINUS     [reduce using rule 48 (exp)]
    TIMES     [reduce using rule 48 (exp)]
    DIVIDE    [reduce using rule 48 (exp)]
    EQ        [reduce using rule 48 (exp)]
    NEQ       [reduce using rule 48 (exp)]
    LT        [reduce using rule 48 (exp)]
    LE        [reduce using rule 48 (exp)]
    GT        [reduce using rule 48 (exp)]
    GE        [reduce using rule 48 (exp)]
    AND       [reduce using rule 48 (exp)]
    OR        [reduce using rule 48 (exp)]
    $default  reduce using rule 48 (exp)


State 71

   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . TIMES exp
   44    | exp . DIVIDE exp
   45    | exp . EQ exp
   46    | exp . NEQ exp
   47    | exp . LT exp
   48    | exp . LE exp
   49    | exp . GT exp
   49    | exp GT exp .
   50    | exp . GE exp
   51    | exp . AND exp
   52    | exp . OR exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48

    PLUS      [reduce using rule 49 (exp)]
    MINUS     [reduce using rule 49 (exp)]
    TIMES     [reduce using rule 49 (exp)]
    DIVIDE    [reduce using rule 49 (exp)]
    EQ        [reduce using rule 49 (exp)]
    NEQ       [reduce using rule 49 (exp)]
    LT        [reduce using rule 49 (exp)]
    LE        [reduce using rule 49 (exp)]
    GT        [reduce using rule 49 (exp)]
    GE        [reduce using rule 49 (exp)]
    AND       [reduce using rule 49 (exp)]
    OR        [reduce using rule 49 (exp)]
    $default  reduce using rule 49 (exp)


State 72

   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . TIMES exp
   44    | exp . DIVIDE exp
   45    | exp . EQ exp
   46    | exp . NEQ exp
   47    | exp . LT exp
   48    | exp . LE exp
   49    | exp . GT exp
   50    | exp . GE exp
   50    | exp GE exp .
   51    | exp . AND exp
   52    | exp . OR exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48

    PLUS      [reduce using rule 50 (exp)]
    MINUS     [reduce using rule 50 (exp)]
    TIMES     [reduce using rule 50 (exp)]
    DIVIDE    [reduce using rule 50 (exp)]
    EQ        [reduce using rule 50 (exp)]
    NEQ       [reduce using rule 50 (exp)]
    LT        [reduce using rule 50 (exp)]
    LE        [reduce using rule 50 (exp)]
    GT        [reduce using rule 50 (exp)]
    GE        [reduce using rule 50 (exp)]
    AND       [reduce using rule 50 (exp)]
    OR        [reduce using rule 50 (exp)]
    $default  reduce using rule 50 (exp)


State 73

   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . TIMES exp
   44    | exp . DIVIDE exp
   45    | exp . EQ exp
   46    | exp . NEQ exp
   47    | exp . LT exp
   48    | exp . LE exp
   49    | exp . GT exp
   50    | exp . GE exp
   51    | exp . AND exp
   51    | exp AND exp .
   52    | exp . OR exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48

    PLUS      [reduce using rule 51 (exp)]
    MINUS     [reduce using rule 51 (exp)]
    TIMES     [reduce using rule 51 (exp)]
    DIVIDE    [reduce using rule 51 (exp)]
    EQ        [reduce using rule 51 (exp)]
    NEQ       [reduce using rule 51 (exp)]
    LT        [reduce using rule 51 (exp)]
    LE        [reduce using rule 51 (exp)]
    GT        [reduce using rule 51 (exp)]
    GE        [reduce using rule 51 (exp)]
    AND       [reduce using rule 51 (exp)]
    OR        [reduce using rule 51 (exp)]
    $default  reduce using rule 51 (exp)


State 74

   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . TIMES exp
   44    | exp . DIVIDE exp
   45    | exp . EQ exp
   46    | exp . NEQ exp
   47    | exp . LT exp
   48    | exp . LE exp
   49    | exp . GT exp
   50    | exp . GE exp
   51    | exp . AND exp
   52    | exp . OR exp
   52    | exp OR exp .

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48

    PLUS      [reduce using rule 52 (exp)]
    MINUS     [reduce using rule 52 (exp)]
    TIMES     [reduce using rule 52 (exp)]
    DIVIDE    [reduce using rule 52 (exp)]
    EQ        [reduce using rule 52 (exp)]
    NEQ       [reduce using rule 52 (exp)]
    LT        [reduce using rule 52 (exp)]
    LE        [reduce using rule 52 (exp)]
    GT        [reduce using rule 52 (exp)]
    GE        [reduce using rule 52 (exp)]
    AND       [reduce using rule 52 (exp)]
    OR        [reduce using rule 52 (exp)]
    $default  reduce using rule 52 (exp)


State 75

   33 exp: ID LPAREN args RPAREN .

    $default  reduce using rule 33 (exp)


State 76

   31 args: exp COLON . args

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    $default  reduce using rule 29 (args)

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    args        go to state 92
    exp         go to state 51


State 77

   22 ifblock: IF exp THEN exp .
   23        | IF exp THEN exp . ELSE exp
   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . TIMES exp
   44    | exp . DIVIDE exp
   45    | exp . EQ exp
   46    | exp . NEQ exp
   47    | exp . LT exp
   48    | exp . LE exp
   49    | exp . GT exp
   50    | exp . GE exp
   51    | exp . AND exp
   52    | exp . OR exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48
    ELSE    shift, and go to state 93

    PLUS      [reduce using rule 22 (ifblock)]
    MINUS     [reduce using rule 22 (ifblock)]
    TIMES     [reduce using rule 22 (ifblock)]
    DIVIDE    [reduce using rule 22 (ifblock)]
    EQ        [reduce using rule 22 (ifblock)]
    NEQ       [reduce using rule 22 (ifblock)]
    LT        [reduce using rule 22 (ifblock)]
    LE        [reduce using rule 22 (ifblock)]
    GT        [reduce using rule 22 (ifblock)]
    GE        [reduce using rule 22 (ifblock)]
    AND       [reduce using rule 22 (ifblock)]
    OR        [reduce using rule 22 (ifblock)]
    ELSE      [reduce using rule 22 (ifblock)]
    $default  reduce using rule 22 (ifblock)


State 78

   21 whileblock: WHILE exp DO exp . SEMICOLON
   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . TIMES exp
   44    | exp . DIVIDE exp
   45    | exp . EQ exp
   46    | exp . NEQ exp
   47    | exp . LT exp
   48    | exp . LE exp
   49    | exp . GT exp
   50    | exp . GE exp
   51    | exp . AND exp
   52    | exp . OR exp

    SEMICOLON  shift, and go to state 94
    PLUS       shift, and go to state 37
    MINUS      shift, and go to state 38
    TIMES      shift, and go to state 39
    DIVIDE     shift, and go to state 40
    EQ         shift, and go to state 41
    NEQ        shift, and go to state 42
    LT         shift, and go to state 43
    LE         shift, and go to state 44
    GT         shift, and go to state 45
    GE         shift, and go to state 46
    AND        shift, and go to state 47
    OR         shift, and go to state 48


State 79

   24 forblock: FOR ID ASSIGN exp . TO exp DO exp SEMICOLON
   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . TIMES exp
   44    | exp . DIVIDE exp
   45    | exp . EQ exp
   46    | exp . NEQ exp
   47    | exp . LT exp
   48    | exp . LE exp
   49    | exp . GT exp
   50    | exp . GE exp
   51    | exp . AND exp
   52    | exp . OR exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48
    TO      shift, and go to state 95


State 80

   26 expseq: LPAREN . explist RPAREN
   34 exp: LPAREN . exp RPAREN

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    explist     go to state 96
    exp         go to state 97


State 81

   20 letblock: LET decs IN expseq . END

    END  shift, and go to state 98


State 82

   25 expseq: explist .

    $default  reduce using rule 25 (expseq)


State 83

   27 explist: exp .
   28        | exp . SEMICOLON explist
   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . TIMES exp
   44    | exp . DIVIDE exp
   45    | exp . EQ exp
   46    | exp . NEQ exp
   47    | exp . LT exp
   48    | exp . LE exp
   49    | exp . GT exp
   50    | exp . GE exp
   51    | exp . AND exp
   52    | exp . OR exp

    SEMICOLON  shift, and go to state 99
    PLUS       shift, and go to state 37
    MINUS      shift, and go to state 38
    TIMES      shift, and go to state 39
    DIVIDE     shift, and go to state 40
    EQ         shift, and go to state 41
    NEQ        shift, and go to state 42
    LT         shift, and go to state 43
    LE         shift, and go to state 44
    GT         shift, and go to state 45
    GE         shift, and go to state 46
    AND        shift, and go to state 47
    OR         shift, and go to state 48

    $default  reduce using rule 27 (explist)


State 84

   14 tyfields: ID . COLON ID
   15         | ID . COLON ID COMMA tyfields

    COLON  shift, and go to state 100


State 85

   18 fundec: FUNCTION ID LPAREN tyfields . RPAREN EQ exp
   19       | FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ exp

    RPAREN  shift, and go to state 101


State 86

   17 vardec: VAR ID COLON ID . ASSIGN exp

    ASSIGN  shift, and go to state 102


State 87

   16 vardec: VAR ID ASSIGN exp .
   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . TIMES exp
   44    | exp . DIVIDE exp
   45    | exp . EQ exp
   46    | exp . NEQ exp
   47    | exp . LT exp
   48    | exp . LE exp
   49    | exp . GT exp
   50    | exp . GE exp
   51    | exp . AND exp
   52    | exp . OR exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48

    PLUS      [reduce using rule 16 (vardec)]
    MINUS     [reduce using rule 16 (vardec)]
    TIMES     [reduce using rule 16 (vardec)]
    DIVIDE    [reduce using rule 16 (vardec)]
    EQ        [reduce using rule 16 (vardec)]
    NEQ       [reduce using rule 16 (vardec)]
    LT        [reduce using rule 16 (vardec)]
    LE        [reduce using rule 16 (vardec)]
    GT        [reduce using rule 16 (vardec)]
    GE        [reduce using rule 16 (vardec)]
    AND       [reduce using rule 16 (vardec)]
    OR        [reduce using rule 16 (vardec)]
    $default  reduce using rule 16 (vardec)


State 88

   10 ty: ID .

    $default  reduce using rule 10 (ty)


State 89

   11 ty: LBRACE . tyfields RBRACE

    ID  shift, and go to state 84

    $default  reduce using rule 13 (tyfields)

    tyfields  go to state 103


State 90

   12 ty: ARRAY . OF ID

    OF  shift, and go to state 104


State 91

    9 tydec: TYPE ID EQ ty .

    $default  reduce using rule 9 (tydec)


State 92

   31 args: exp COLON args .

    $default  reduce using rule 31 (args)


State 93

   23 ifblock: IF exp THEN exp ELSE . exp

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    exp         go to state 105


State 94

   21 whileblock: WHILE exp DO exp SEMICOLON .

    $default  reduce using rule 21 (whileblock)


State 95

   24 forblock: FOR ID ASSIGN exp TO . exp DO exp SEMICOLON

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    exp         go to state 106


State 96

   26 expseq: LPAREN explist . RPAREN

    RPAREN  shift, and go to state 107


State 97

   27 explist: exp .
   28        | exp . SEMICOLON explist
   34 exp: LPAREN exp . RPAREN
   41    | exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . TIMES exp
   44    | exp . DIVIDE exp
   45    | exp . EQ exp
   46    | exp . NEQ exp
   47    | exp . LT exp
   48    | exp . LE exp
   49    | exp . GT exp
   50    | exp . GE exp
   51    | exp . AND exp
   52    | exp . OR exp

    SEMICOLON  shift, and go to state 99
    RPAREN     shift, and go to state 53
    PLUS       shift, and go to state 37
    MINUS      shift, and go to state 38
    TIMES      shift, and go to state 39
    DIVIDE     shift, and go to state 40
    EQ         shift, and go to state 41
    NEQ        shift, and go to state 42
    LT         shift, and go to state 43
    LE         shift, and go to state 44
    GT         shift, and go to state 45
    GE         shift, and go to state 46
    AND        shift, and go to state 47
    OR         shift, and go to state 48

    RPAREN  [reduce using rule 27 (explist)]


State 98

   20 letblock: LET decs IN expseq END .

    $default  reduce using rule 20 (letblock)


State 99

   28 explist: exp SEMICOLON . explist

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    explist     go to state 108
    exp         go to state 83


State 100

   14 tyfields: ID COLON . ID
   15         | ID COLON . ID COMMA tyfields

    ID  shift, and go to state 109


State 101

   18 fundec: FUNCTION ID LPAREN tyfields RPAREN . EQ exp
   19       | FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ exp

    COLON  shift, and go to state 110
    EQ     shift, and go to state 111


State 102

   17 vardec: VAR ID COLON ID ASSIGN . exp

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    exp         go to state 112


State 103

   11 ty: LBRACE tyfields . RBRACE

    RBRACE  shift, and go to state 113


State 104

   12 ty: ARRAY OF . ID

    ID  shift, and go to state 114


State 105

   23 ifblock: IF exp THEN exp ELSE exp .
   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . TIMES exp
   44    | exp . DIVIDE exp
   45    | exp . EQ exp
   46    | exp . NEQ exp
   47    | exp . LT exp
   48    | exp . LE exp
   49    | exp . GT exp
   50    | exp . GE exp
   51    | exp . AND exp
   52    | exp . OR exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48

    PLUS      [reduce using rule 23 (ifblock)]
    MINUS     [reduce using rule 23 (ifblock)]
    TIMES     [reduce using rule 23 (ifblock)]
    DIVIDE    [reduce using rule 23 (ifblock)]
    EQ        [reduce using rule 23 (ifblock)]
    NEQ       [reduce using rule 23 (ifblock)]
    LT        [reduce using rule 23 (ifblock)]
    LE        [reduce using rule 23 (ifblock)]
    GT        [reduce using rule 23 (ifblock)]
    GE        [reduce using rule 23 (ifblock)]
    AND       [reduce using rule 23 (ifblock)]
    OR        [reduce using rule 23 (ifblock)]
    $default  reduce using rule 23 (ifblock)


State 106

   24 forblock: FOR ID ASSIGN exp TO exp . DO exp SEMICOLON
   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . TIMES exp
   44    | exp . DIVIDE exp
   45    | exp . EQ exp
   46    | exp . NEQ exp
   47    | exp . LT exp
   48    | exp . LE exp
   49    | exp . GT exp
   50    | exp . GE exp
   51    | exp . AND exp
   52    | exp . OR exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48
    DO      shift, and go to state 115


State 107

   26 expseq: LPAREN explist RPAREN .

    $default  reduce using rule 26 (expseq)


State 108

   28 explist: exp SEMICOLON explist .

    $default  reduce using rule 28 (explist)


State 109

   14 tyfields: ID COLON ID .
   15         | ID COLON ID . COMMA tyfields

    COMMA  shift, and go to state 116

    $default  reduce using rule 14 (tyfields)


State 110

   19 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ exp

    ID  shift, and go to state 117


State 111

   18 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ . exp

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    exp         go to state 118


State 112

   17 vardec: VAR ID COLON ID ASSIGN exp .
   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . TIMES exp
   44    | exp . DIVIDE exp
   45    | exp . EQ exp
   46    | exp . NEQ exp
   47    | exp . LT exp
   48    | exp . LE exp
   49    | exp . GT exp
   50    | exp . GE exp
   51    | exp . AND exp
   52    | exp . OR exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48

    PLUS      [reduce using rule 17 (vardec)]
    MINUS     [reduce using rule 17 (vardec)]
    TIMES     [reduce using rule 17 (vardec)]
    DIVIDE    [reduce using rule 17 (vardec)]
    EQ        [reduce using rule 17 (vardec)]
    NEQ       [reduce using rule 17 (vardec)]
    LT        [reduce using rule 17 (vardec)]
    LE        [reduce using rule 17 (vardec)]
    GT        [reduce using rule 17 (vardec)]
    GE        [reduce using rule 17 (vardec)]
    AND       [reduce using rule 17 (vardec)]
    OR        [reduce using rule 17 (vardec)]
    $default  reduce using rule 17 (vardec)


State 113

   11 ty: LBRACE tyfields RBRACE .

    $default  reduce using rule 11 (ty)


State 114

   12 ty: ARRAY OF ID .

    $default  reduce using rule 12 (ty)


State 115

   24 forblock: FOR ID ASSIGN exp TO exp DO . exp SEMICOLON

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    exp         go to state 119


State 116

   15 tyfields: ID COLON ID COMMA . tyfields

    ID  shift, and go to state 84

    $default  reduce using rule 13 (tyfields)

    tyfields  go to state 120


State 117

   19 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ exp

    EQ  shift, and go to state 121


State 118

   18 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp .
   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . TIMES exp
   44    | exp . DIVIDE exp
   45    | exp . EQ exp
   46    | exp . NEQ exp
   47    | exp . LT exp
   48    | exp . LE exp
   49    | exp . GT exp
   50    | exp . GE exp
   51    | exp . AND exp
   52    | exp . OR exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48

    PLUS      [reduce using rule 18 (fundec)]
    MINUS     [reduce using rule 18 (fundec)]
    TIMES     [reduce using rule 18 (fundec)]
    DIVIDE    [reduce using rule 18 (fundec)]
    EQ        [reduce using rule 18 (fundec)]
    NEQ       [reduce using rule 18 (fundec)]
    LT        [reduce using rule 18 (fundec)]
    LE        [reduce using rule 18 (fundec)]
    GT        [reduce using rule 18 (fundec)]
    GE        [reduce using rule 18 (fundec)]
    AND       [reduce using rule 18 (fundec)]
    OR        [reduce using rule 18 (fundec)]
    $default  reduce using rule 18 (fundec)


State 119

   24 forblock: FOR ID ASSIGN exp TO exp DO exp . SEMICOLON
   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . TIMES exp
   44    | exp . DIVIDE exp
   45    | exp . EQ exp
   46    | exp . NEQ exp
   47    | exp . LT exp
   48    | exp . LE exp
   49    | exp . GT exp
   50    | exp . GE exp
   51    | exp . AND exp
   52    | exp . OR exp

    SEMICOLON  shift, and go to state 122
    PLUS       shift, and go to state 37
    MINUS      shift, and go to state 38
    TIMES      shift, and go to state 39
    DIVIDE     shift, and go to state 40
    EQ         shift, and go to state 41
    NEQ        shift, and go to state 42
    LT         shift, and go to state 43
    LE         shift, and go to state 44
    GT         shift, and go to state 45
    GE         shift, and go to state 46
    AND        shift, and go to state 47
    OR         shift, and go to state 48


State 120

   15 tyfields: ID COLON ID COMMA tyfields .

    $default  reduce using rule 15 (tyfields)


State 121

   19 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . exp

    ID        shift, and go to state 1
    STRING    shift, and go to state 2
    INT       shift, and go to state 3
    LPAREN    shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    BREAK     shift, and go to state 9
    FUNCTION  shift, and go to state 10
    VAR       shift, and go to state 11
    TYPE      shift, and go to state 12

    dec         go to state 25
    tydec       go to state 15
    vardec      go to state 16
    fundec      go to state 17
    letblock    go to state 18
    whileblock  go to state 19
    ifblock     go to state 20
    forblock    go to state 21
    exp         go to state 123


State 122

   24 forblock: FOR ID ASSIGN exp TO exp DO exp SEMICOLON .

    $default  reduce using rule 24 (forblock)


State 123

   19 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp .
   41 exp: exp . PLUS exp
   42    | exp . MINUS exp
   43    | exp . TIMES exp
   44    | exp . DIVIDE exp
   45    | exp . EQ exp
   46    | exp . NEQ exp
   47    | exp . LT exp
   48    | exp . LE exp
   49    | exp . GT exp
   50    | exp . GE exp
   51    | exp . AND exp
   52    | exp . OR exp

    PLUS    shift, and go to state 37
    MINUS   shift, and go to state 38
    TIMES   shift, and go to state 39
    DIVIDE  shift, and go to state 40
    EQ      shift, and go to state 41
    NEQ     shift, and go to state 42
    LT      shift, and go to state 43
    LE      shift, and go to state 44
    GT      shift, and go to state 45
    GE      shift, and go to state 46
    AND     shift, and go to state 47
    OR      shift, and go to state 48

    PLUS      [reduce using rule 19 (fundec)]
    MINUS     [reduce using rule 19 (fundec)]
    TIMES     [reduce using rule 19 (fundec)]
    DIVIDE    [reduce using rule 19 (fundec)]
    EQ        [reduce using rule 19 (fundec)]
    NEQ       [reduce using rule 19 (fundec)]
    LT        [reduce using rule 19 (fundec)]
    LE        [reduce using rule 19 (fundec)]
    GT        [reduce using rule 19 (fundec)]
    GE        [reduce using rule 19 (fundec)]
    AND       [reduce using rule 19 (fundec)]
    OR        [reduce using rule 19 (fundec)]
    $default  reduce using rule 19 (fundec)
